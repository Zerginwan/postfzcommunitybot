'use strict';
const { existsSync, closeSync, openSync, writeFileSync, readFileSync, readFile, writeFile } = require('fs');
const { Telegraf } = require('telegraf');
const { markdown } = require('telegraf/extra');
const { callbackButton } = require('telegraf/markup');
const { botToken, botName, chat_file, channel_id, admin_id, admins, moderators } = require('./config.json');
const { isAdmin, isPrivateMessage, logToAdmin, getLikeButton, getJoinButton, hasSpamButton } = require('./helpers');
const bot = new Telegraf(botToken, {username: botName}); 

const helpMessage = '–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —Å–≤–æ—é –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ —É–ø–æ–º–∏–Ω–∞—Ç—å –º–µ–Ω—è.\n–ï—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç—å –º–µ–Ω—è –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —è –æ—Ç–ø—Ä–∞–≤–ª—é –ø–æ—Å—Ç –≤ "–°–µ–∫—Ä–µ—Ç–Ω—ã–µ –î–≤–∏–∂—É—Ö–∏". \n–¢–∞–∫ –∂–µ –º–æ–∂–Ω–æ —É–æ–ø–º—è–Ω—É—Ç—å –º–µ–Ω—è –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. –¢–æ–≥–¥–∞ —è –æ–±—Ä–∞–±–æ—Ç–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–û—Ç–ø—Ä–∞–≤—å /event *–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è*, —á—Ç–æ–±—ã –∑–∞–ø–æ—Å—Ç–∏—Ç—å —á—Ç–æ-—Ç–æ —Å—Ä–∞–∑—É –≤ –∫–∞–Ω–∞–ª.';
const helpMessageForAdmins = '–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç: /add_chat \n –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ JSON: /get_chats /set_chats\n/show_my_id';
const startMessage = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –î—Ä—É–∂–µ!\n'+helpMessage;
const eventMessage = '–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n/event –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç. –ó–∞–≤—Ç—Ä–∞ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ 13-00';
const eventMessage2 = '–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª';
const add_chatMessage = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ /add_chat ***–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞*$*–°—Å—ã–ª–∫–∞';
const set_chatsMessage = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ /set_chats {"–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞1":"—Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç1","–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞2":"–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç 2"}';

function tryFile() {
    if (existsSync(chat_file)) {
        return
    }

    closeSync(openSync(chat_file, 'w'));
    writeFileSync(chat_file,'{}');
}

function GetChatURL(title){
    //–í–∑—è—Ç—å —Å—Å—ã–ª–∫—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞.
    let link = ""
    tryFile()
    let data = readFileSync(chat_file)
    let chats = JSON.parse(data);
    
    if(Object.keys(chats).includes(title)) {
        link = chats[title];
    }
        
    return link
}

// –í–∑—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–∂–∞—Ç—å –∏–∑ –Ω–µ–≥–æ –≤—Å–µ —Å–æ–∫–∏, –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª
async function SendEventMessage(message){
    if (message.text === '') {
        return;
    }

    let newMessage = message.text.replace('_','\\_') +'\n\n - @';
    newMessage += message.from.username.replace('_','\\_');
    if(message.chat.type != 'private') {
        let link = GetChatURL(message.chat.title);
        if(link) {
            newMessage += ` –∏–∑ [${message.chat.title.replace('_','\\_')}](${link})\n`;
        } else {
            newMessage += ` –∏–∑ ¬´${message.chat.title.replace('_','\\_')}¬ª\n`;
        }
        newMessage += ` ‚Äî [–ò—Å—Ç–æ—á–Ω–∏–∫](https://t.me/c/${message.chat.id.toString().slice(4)}/${message.message_id})`;
    }
    
    bot.telegram.sendMessage(
        channel_id, 
        newMessage, 
        markdown().webPreview(false).markup(m =>
            m.inlineKeyboard([
                m.callbackButton('‚ùå –°–ø–∞–º!', 'report'),
                m.callbackButton('üß°', 'like'),
                m.callbackButton('üèÉ', 'join'),
            ])
        ))
        .catch(err => 
            bot.telegram.sendMessage(admin_id, err));
}

bot.start((ctx) => {
    if(isPrivateMessage(ctx)) {
        ctx.reply(startMessage)
    }}); //–æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start

bot.help((ctx) => {
    if(isPrivateMessage(ctx)) {
        ctx.reply(helpMessage);
    if(admins.includes(ctx.update.message.from.username)){
        ctx.reply(helpMessageForAdmins)
    }
}}); //–æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help

bot.command('event', (ctx) => {
    if(isPrivateMessage(ctx) && !ctx.update.message.from.is_bot) {
        if(ctx.update.message.text.trim() == '/event') {
            ctx.reply(eventMessage)
        } else {
            ctx.update.message.text = ctx.update.message.text.replace('/event ', '').trim()
            SendEventMessage(ctx.update.message);
            ctx.reply(eventMessage2)
        }
    }
}); // //–æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /event

bot.command('get_chats', (ctx) => {
    if(isAdmin(ctx)) {
        tryFile();
        readFile(chat_file, (err, data) => {
            if (err) throw err;
            ctx.reply('–¢–µ–∫—É—â–∏–π JSON: \n' + data);
        });
    }
}); // //–æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /get_chats

bot.command('set_chats', async function(ctx) {
    if(isPrivateMessage(ctx) && isAdmin(ctx)) {
        if(ctx.update.message.text.trim() == '/set_chats') {
            ctx.telegram.sendMessage(ctx.from.id, set_chatsMessage)
        } else {
            tryFile()
            readFile(chat_file, (err, data) => {
                if (err) throw err;

                ctx.reply('–°—Ç–∞—Ä—ã–π JSON: \n' + data);

                writeFile(
                    chat_file, 
                    ctx.update.message.text.replace('/set_chats','').trim(), 
                    err => bot.telegram.sendMessage(admin_id, err));

                readFile(chat_file, (err, data) => {
                    if (err) throw err;

                    ctx.reply('–ù–æ–≤—ã–π JSON: \n' + data);
                });
            });
        }
    }
}); // //–æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /set_chats

bot.command('add_chat', (ctx) => {
    if(admins.includes(ctx.update.message.from.username)){
        if(ctx.update.message.text == '/add_chat'){
            ctx.telegram.sendMessage(ctx.from.id, add_chatMessage)
        } else {
            tryFile();
            readFile(chat_file, (err, data) =>{
                if (err) throw err;
                let json = JSON.parse(data);
                let chat = ctx.update.message.text.replace('/add_chat ***','');
                if(chat.includes('*$*') && !chat.startsWith(' ')){
                    json[chat.split('*$*')[0]] = chat.split('*$*')[1];
                    writeFile(chat_file, JSON.stringify(json),(err) => {
                        bot.telegram.sendMessage(admin_id, err);
                      });
                    ctx.telegram.sendMessage(ctx.from.id, `–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç ${chat.split('*$*')[0]}
                    ${chat.split('*$*')[1]}`);
                }else{
                    ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n' + add_chatMessage);
                }
            });
        }
    }
}); // //–æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /add_chat

bot.mention(botName, (ctx) => {
    //–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –æ—Ç –ª—é–¥–µ–π –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
    if(isGroupChat(ctx) && !ctx.update.message.from.is_bot) {
        //–µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–ø–ª–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if(ctx.update.message.reply_to_message) {
            //–≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ.
            if(ctx.update.message.text == '@'+botName) {
                SendEventMessage(ctx.update.message.reply_to_message);
            }
        } else {
        //–ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ, 
        // –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º.
            if(ctx.update.message.text.endsWith('@'+botName) || ctx.update.message.text.startsWith('@'+botName)) {
                ctx.update.message.text = ctx.update.message.text.replace('@'+botName, '').trim()
                SendEventMessage(ctx.update.message);
            }
        }
    }
});

bot.command('show_my_id',ctx => { 
    ctx.reply(ctx.update.message.chat.id);
});

bot.action('report', ctx => {
    moderators.forEach(moderator_id => {
        bot.telegram
            .sendMessage(moderator_id, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${ctx.update.callback_query.from.username.replace('_','\\_')} –ø–æ—Å—á–∏—Ç–∞–ª [—ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ](https://t.me/c/${channel_id.toString().slice(4)}/${ctx.update.callback_query.message.message_id}) —Å–ø–∞–º–æ–º`, markdown())
            .catch(logToAdmin(bot));
    });
    let likes = getLikeButton(ctx).text.slice(2);
    let joins = getJoinButton(ctx).text.slice(2);
	if(!likes) likes = "";
	if(!joins) joins = "";
    ctx.editMessageReplyMarkup({
        inline_keyboard: [
            [
                callbackButton(`‚ù§Ô∏è${likes}`, 'like'),
                callbackButton(`üèÉ${joins}`, 'join'),
            ]
        ]
    });
});

bot.action('like', async ctx => {
    let likes = getLikeButton(ctx).text.slice(2) || 0;
    let joins = getJoinButton(ctx).text.slice(2);

    let callbackButtons = [
        callbackButton(`‚ù§Ô∏è${parseInt(likes) + 1}`, 'like'),
        callbackButton(`üèÉ${joins}`, 'join'),
    ];

    if (hasSpamButton(ctx)) {
        callbackButtons.unshift(
            callbackButton('‚ùå –°–ø–∞–º!', 'report')
        )
    }

    ctx.editMessageReplyMarkup({
        inline_keyboard: [ [ ...callbackButtons ] ]
    });
});

bot.action('join', async ctx => {
    let likes = getLikeButton(ctx).text.slice(2);
    let joins = getJoinButton(ctx).text.slice(2) || 0;

    let callbackButtons = [
        callbackButton(`‚ù§Ô∏è${likes}`, 'like'),
        callbackButton(`üèÉ${parseInt(joins) + 1}`, 'join'),
    ];

    if (hasSpamButton(ctx)) {
        callbackButtons.unshift(
            callbackButton('‚ùå –°–ø–∞–º!', 'report')
        )
    }

    ctx.editMessageReplyMarkup({
        inline_keyboard: [ [ ...callbackButtons ] ]
    });
});

bot.command('test', ctx => {
    moderators.forEach(moderator_id => {
        bot.telegram.sendMessage(moderator_id, '–¢–µ—Å—Ç –Ω–∞ —Å–ø–∞–º')
    });
});

bot.launch();
